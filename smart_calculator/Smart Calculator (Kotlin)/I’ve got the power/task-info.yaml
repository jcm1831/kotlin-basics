type: edu
files:
- name: test/Test.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.util.List;

    public class Test extends StageTest<String> {
        @Override
        public List<TestCase<String>> generate() {
            return Arrays.asList(
                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // tests of functionality of previous steps
                    main.start();

                    // test of /help
                    String output = main.execute("/help").trim();
                    if (output.length() < 4) {
                        return CheckResult.wrong(
                            "It seems like there was no any \"help\" message.");
                    }

                    // input empty string
                    output = main.execute("");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Incorrect response to an empty string. " +
                            "The program should not print anything.");
                    }

                    // testing basic assignment
                    output = main.execute("n = -32");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // testing a big amount of numbers
                    output = main.execute("33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4").trim();
                    if (!output.equals("-3")) {
                        return CheckResult.wrong(
                            "The program cannot process addition and " +
                                "subtraction operations correctly.");
                    }

                    // the same with a variable
                    output = main.execute("33 + 20 + 11 + 49 + n - 9 + 1 - 80 + 4").trim();
                    if (!output.equals("-3")) {
                        return CheckResult.wrong(
                            "The program cannot process addition and " +
                                "subtraction operations correctly.");
                    }


                    output = main.execute("c = n \nc = -2");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // check value
                    output = main.execute("  c   ").trim();
                    if (!output.equals("-2")) {
                        return CheckResult.wrong(
                            "The variable stores not a correct value." +
                            "May be the program could not assign the value " +
                                "of one variable to another one.");
                    }

                    // the sum of the numbers is zero
                    output = main.execute("11 - 9 + c").trim();
                    if (!output.equals("0")) {
                        return CheckResult.wrong(
                            "The problem when sum is equal to 0 has occurred.");
                    }

                    // test of multiple operations
                    output = main.execute("5 --- 2 ++++++ 4 -- 2 ---- 1").trim();
                    if (!output.equals("10")) {
                        return CheckResult.wrong(
                            "The program cannot process multiple operations " +
                                "with several operators.");
                    }

                    // test of a nonexistent command
                    output = main.execute("/start").trim().toLowerCase();
                    if (!output.startsWith("unknown")) {
                        return CheckResult.wrong(
                            "The program should print \"Unknown command\" " +
                            "when a nonexistent command is entered.");
                    }

                    // testing invalid variable name
                    output = main.execute("var1 = 1").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The name of variable should contain only Latin letters.");
                    }

                    // testing invalid value
                    output = main.execute("var = 2a").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The value can be an integer number or a value of another variable");
                    }

                    // testing multiple equalization
                    output = main.execute("c = 7 - 1 = 5").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program could not handle a invalid assignment.");
                    }

                    // testing assignment by unassigned variable
                    output = main.execute("variable = f").trim().toLowerCase();
                    if (!(output.startsWith("unknown") || output.startsWith("invalid"))) {
                        return CheckResult.wrong(
                            "The program should not allow an assignment by unassigned variable.");
                    }

                    // checking case sensitivity
                    main.execute("variable = 777");
                    output = main.execute("Variable").trim().toLowerCase();
                    if (!output.startsWith("unknown") && !output.startsWith("invalid")) {
                        return CheckResult.wrong("The program should be case sensitive.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // A test suit for multiplication and division
                    main.start();

                    String output = main.execute("4 * 3").trim();
                    if (!output.equals("12")) {
                        return CheckResult.wrong(
                            "The program has problems with multiplication operation.");
                    }

                    output = main.execute("91 / 13").trim();
                    if (!output.equals("7")) {
                        return CheckResult.wrong(
                            "The program has problems with division operation.");
                    }

                    // testing all operators
                    main.execute(" a= 7 \n b =2");
                    output = main.execute("a * 4 / b - (3 - 1)").trim();
                    if (!output.equals("12")) {
                        return CheckResult.wrong(
                            "The program cannot correctly process several operations.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // testing priority of parentheses
                    main.start();

                    // expression from the example
                    String output = main.execute(
                        "7 + 3 * ((4 + 3) * 7 + 1) - 6 / (2 + 1)").trim();

                    if (!output.equals("155")) {
                        return CheckResult.wrong(
                            "The program cannot reproduce an example from the task.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),
                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // a set of negative tests
                    main.start();

                    // tests with unclosed brackets
                    String output = main.execute("8 * (2 + 3").trim().toLowerCase();
                    String output1 = main.execute("4 + 5)").trim().toLowerCase();
                    if (!output.startsWith("invalid") || !output1.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program could not handle an invalid expression.");
                    }

                    // sequence of * test
                    output = main.execute("2 ************ 2").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "A sequence of \"*\" should return \"Invalid expression\".");
                    }

                    // sequence of / test
                    output = main.execute("2 // 2").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "A sequence of \"/\" should return \"Invalid expression\".");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                })
            );
        }
    }
  learner_created: false
- name: src/calculator/Operations.kt
  visible: true
  text: |-
    package calculator

    fun add(s1: Int, s2: Int): Int = s1 + s2
    fun subtract(s1: Int, s2: Int): Int = s1 - s2
    fun multiply(s1: Int, s2: Int): Int = s1 * s2
    fun divide(s1: Int, s2: Int): Int = s1 / s2

    typealias Operation = (Int, Int) -> Int

    val operations = mapOf(
        "+" to ::add,
        "-" to ::subtract,
        "*" to ::multiply,
        "/" to ::divide
    )

    fun getOperation(op: String): Operation? {
        val operation = operations[op]
        return if (operation != null) {
            operation
        } else {
            println("Unknown operation")
            null
        }
    }
  learner_created: true
- name: src/calculator/Commands.kt
  visible: true
  text: |+
    package calculator

    fun isCommand(input: String) = input.startsWith("/")
    fun isNoCommand(input: String) = !isCommand(input)
    fun isNotExit(input: String) = input != "/exit"
    fun printHelp() {
        println(
            "The program calculates the result of an expression " +
                    "containing an arbitrary number of addition and " +
                    "subtraction operations."
        )
    }

    fun exit() {
        println("Bye!")
    }

    val commands = mapOf(
        "/help" to ::printHelp,
        "/exit" to ::exit,
    )

    fun executeCommand(input: String) {
        val command = commands[input]
        if (command != null) {
            command()
        } else {
            println("Unknown command")
        }
    }

  learner_created: true
- name: src/calculator/Assignments.kt
  visible: true
  text: |+
    package calculator

    fun isAssignment(input: String) = input.contains("=")

    fun isNoAssignment(input: String) = !isAssignment(input)

    fun isValidVariable(input: String): Boolean {
        return "[a-zA-Z]+".toRegex().matches(input)
    }

    fun isValidNumber(input: String): Boolean {
        return "[+-]?\\d+".toRegex().matches(input)
    }

    fun isValidLhs(lhs: String): Boolean {
        return if (isValidVariable(lhs)) {
            true
        } else {
            println("Invalid identifier")
            false
        }
    }

    fun isValidRhs(rhs: String): Boolean {
        return if (isValidVariable(rhs) || isValidNumber(rhs)) {
            true
        } else {
            println("Invalid assignment")
            false
        }
    }

    fun splitIntoLhsAndRhs(input: String): Pair<String, String> {
        val aux = input.split("=", " =", "= ", " = ", limit = 2)
        return Pair(aux.first().trim(), aux.last().trim())
    }

    fun isValidAssignment(input: String): Boolean {
        val (lhs, rhs) = splitIntoLhsAndRhs(input)
        return isValidLhs(lhs) && isValidRhs(rhs)
    }

    fun assignVariableToCache(assignment: String) {
        if (isValidAssignment(assignment)) {
            val (lhs, rhs) = splitIntoLhsAndRhs(assignment)
            if (isValidNumber(rhs)) {
                addVariable(Pair(lhs, rhs.toInt()))
            } else if (isValidVariable(rhs)) {
                val value = getValue(rhs)
                if (value != null) addVariable(Pair(lhs, value))
            } else if (isExpression(rhs)) {
                val result = calculate(rhs)
                if (result != null) addVariable(Pair(lhs, result))
            }
        }
    }


  learner_created: true
- name: src/calculator/Main.kt
  visible: true
  text: |
    package calculator

    fun main() {
        println("Hello, World!")
    }
  learner_created: false
- name: src/calculator/Expressions.kt
  visible: true
  text: |+
    package calculator

    fun formatExpression(expression: String): String {
        return expression.replace("((\\+)|(--))+".toRegex(), "+")
            .replace("((\\+?-\\+)|(\\+-\\+?)|(-))+".toRegex(), "-")
    }

    fun isExpression(input: String): Boolean {
        return isNoCommand(input) && isNoAssignment(input) && isNotEmpty(input)
    }

    fun isValidExpression(expression: String): Boolean {
        return "[+-]?(\\d|[a-zA-Z])+( [+-] [+-]?(\\d|[a-zA-Z])+)*".toRegex().matches(expression)
    }

    fun getOperands(expression: String): List<String> {
        return "[+-]?(\\d|[a-zA-Z])+".toRegex().findAll(expression).map { it.value }
            .toList()
    }

    fun getOperators(expression: String): List<String> {
        return "[+-]".toRegex().findAll(expression).map { it.value }.toList()
    }

    fun calculate(expression: String) : Int? {
        val operands = getOperands(expression)
        val operators = getOperators(expression)

        var result = try {
            operands.first().toInt()
        } catch (e: Exception) {
            getValue(operands.first()) ?: return null
        }

        if (operands.size > 1) {
            for (i in operators.indices) {
                val operation = getOperation(operators[i])
                if (operation != null) {
                    result = try {
                        val operand = operands[i + 1].toInt()
                        operation(result, operand)
                    } catch (e: Exception) {
                        val value = getValue(operands[i + 1])
                        if (value != null) {
                            operation(result, value)
                        } else {
                            return null
                        }
                    }
                } else {
                    return null
                }
            }
        }
        return result
    }

    fun evaluateExpression(input: String) {
        val expression = formatExpression(input)
        if (isValidExpression(expression)) {
            val result = calculate(expression)
            if (result != null) println(result)
        } else {
            println("Invalid expression")
        }
    }



  learner_created: true
- name: src/calculator/VariableCache.kt
  visible: true
  text: |
    package calculator

    val variableCache = mutableMapOf<String, Int>()

    fun addVariable(variable: Pair<String, Int>) {
        variableCache += variable
    }

    fun getValue(name: String): Int? {
        return if (variableCache.containsKey(name)) {
            variableCache[name]
        } else {
            println("Unknown variable")
            null
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7815#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Wed, 12 Apr 2023 11:46:17 UTC"
record: 7
