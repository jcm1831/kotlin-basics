type: edu
files:
- name: src/calculator/Main.kt
  visible: true
  text: |
    package calculator

    fun main() {
        println("Hello, World!")
    }
  learner_created: false
- name: test/Test.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.util.List;

    public class Test extends StageTest<String> {
        @Override
        public List<TestCase<String>> generate() {
            return Arrays.asList(
                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // tests of functionality of previous steps
                    main.start();

                    // test of /help
                    String output = main.execute("/help").trim();
                    if (output.length() < 4) {
                        return CheckResult.wrong(
                            "It seems like there was no any \"help\" message.");
                    }

                    // input empty string
                    output = main.execute("");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Incorrect response to an empty string. " +
                            "The program should not print anything.");
                    }

                    // testing basic assignment
                    output = main.execute("n = 32");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // testing a big amount of numbers
                    output = main.execute("33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4").trim();
                    if (!output.equals("-3")) {
                        return CheckResult.wrong(
                            "The program cannot process addition " +
                            "and subtraction operations correctly.");
                    }

                    // the same with a variable
                    output = main.execute("33 + 20 + 11 + 49 - n - 9 + 1 - 80 + 4").trim();
                    if (!output.equals("-3")) {
                        return CheckResult.wrong(
                            "The program cannot process addition " +
                            "and subtraction operations correctly.");
                    }


                    output = main.execute("c = n \nc = 2");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // check value
                    output = main.execute("  c  ").trim();
                    if (!output.equals("2")) {
                        return CheckResult.wrong(
                            "The variable stores not a correct value." +
                            "May be the program could not assign the value " +
                                "of one variable to another one.");
                    }

                    // the sum of the numbers is zero
                    output = main.execute("11 - 13 + c").trim();
                    if (!output.equals("0")) {
                        return CheckResult.wrong(
                            "The problem when sum is equal to 0 has occurred.");
                    }

                    // test of multiple operations
                    output = main.execute("5 --- 2 ++++++ 4 -- 2 ---- 1").trim();
                    if (!output.equals("10")) {
                        return CheckResult.wrong(
                            "The program cannot process " +
                            "multiple operations with several operators.");
                    }

                    // test of a nonexistent command
                    output = main.execute("/start").trim().toLowerCase();
                    if (!output.startsWith("unknown")) {
                        return CheckResult.wrong(
                            "The program should print \"Unknown command\" " +
                            "when a nonexistent command is entered.");
                    }

                    // testing invalid variable name
                    output = main.execute("var1 = 1").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The name of variable should contain only Latin letters.");
                    }

                    // testing invalid value
                    output = main.execute("var = 2a").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The value can be an integer number or a value of another variable");
                    }

                    // testing multiple equalization
                    output = main.execute("c = 7 - 1 = 5").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program could not handle a invalid assignment.");
                    }

                    // testing assignment by unassigned variable
                    output = main.execute("variable = f").trim().toLowerCase();
                    if (!(output.startsWith("unknown") || output.startsWith("invalid"))) {
                        return CheckResult.wrong(
                            "The program should not allow an assignment by unassigned variable.");
                    }

                    // checking case sensitivity
                    main.execute("variable = 777");
                    output = main.execute("Variable").trim().toLowerCase();
                    if (!output.startsWith("unknown")) {
                        return CheckResult.wrong("The program should be case sensitive.");
                    }

                    // checking case sensitivity
                    main.execute("variable = 777");
                    output = main.execute("Variable").trim().toLowerCase();
                    if (!output.startsWith("unknown")) {
                        return CheckResult.wrong("The program should be case sensitive.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // A test suit for multiplication and division
                    main.start();

                    String output = main.execute("4 * 3").trim();
                    if (!output.equals("12")) {
                        return CheckResult.wrong(
                            "The program has problems with multiplication operation.");
                    }

                    output = main.execute("91 / 13").trim();
                    if (!output.equals("7")) {
                        return CheckResult.wrong(
                            "The program has problems with division operation.");
                    }

                    // testing all operators
                    main.execute(" a= 7 \n b =2");
                    output = main.execute("a * 4 / b - (3 - 1)").trim();
                    if (!output.equals("12")) {
                        return CheckResult.wrong(
                            "The program cannot correctly process several operations.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // testing priority of parentheses
                    main.start();

                    // expression from the example
                    String output = main.execute(
                        "7 + 3 * ((4 + 3) * 7 + 1) - 6 / (2 + 1)").trim();

                    if (!output.equals("155")) {
                        return CheckResult.wrong(
                            "The program cannot reproduce an example from the task.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // a set of negative tests
                    main.start();

                    // tests with unclosed brackets
                    String output = main.execute("8 * (2 + 3").trim().toLowerCase();
                    String output1 = main.execute("4 + 5)").trim().toLowerCase();
                    if (!output.startsWith("invalid") || !output1.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program could not handle an invalid expression.");
                    }

                    // sequence of * test
                    output = main.execute("2 ************ 2").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "A sequence of \"*\" should return \"Invalid expression\".");
                    }

                    // sequence of / test
                    output = main.execute("2 // 2").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "A sequence of \"/\" should return \"Invalid expression\".");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // test suit for the 8th stage with very large numbers
                    main.start();

                    // testing basic assignment
                    String output = main.execute("n = 32000000000000000000");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // testing a big amount of numbers
                    output = main.execute(
                        "33000000000000000000 + 20000000000000000000 + 11000000000000000000 + " +
                        "49000000000000000000 - 32000000000000000000 - 9000000000000000000 " +
                        "+ 1000000000000000000 - 80000000000000000000 + 4000000000000000000 + 1").trim();
                    if (!output.equals("-2999999999999999999")) {
                        return CheckResult.wrong(
                            "The program cannot process addition " +
                            "and subtraction operations correctly.");
                    }

                    // the same with a variable
                    output = main.execute(
                        "33000000000000000000 + 20000000000000000000 + 11000000000000000000 + " +
                        "49000000000000000000 - n - 9000000000000000000 " +
                        "+ 1000000000000000000 - 80000000000000000000 + 4000000000000000000 + 1").trim();
                    if (!output.equals("-2999999999999999999")) {
                        return CheckResult.wrong(
                            "The program cannot process addition " +
                            "and subtraction operations correctly.");
                    }

                    // testing reassignment with big values
                    output = main.execute("c = n \nc = 2000000000000000000000");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // check value
                    output = main.execute("  c   ").trim();
                    if (!output.equals("2000000000000000000000")) {
                        return CheckResult.wrong(
                            "The variable stores not a correct value." +
                            "May be the program could not assign the value " +
                                "of one variable to another one.");
                    }

                    // the sum of the numbers is zero
                    output = main.execute(
                        "11000000000000000000 - 9000000000000000000 - " +
                        "c + 1998000000000000000000").trim();
                    if (!output.equals("0")) {
                        return CheckResult.wrong("The problem when sum is equal to 0 has occurred.");
                    }

                    // test of multiple operations
                    output = main.execute(
                        "5000000000000000000 --- 2000000000000000000 " +
                        "++++++ 4000000000000000000 -- 2000000000000000000 ---- 1000000000000000000").trim();
                    if (!output.equals("10000000000000000000")) {
                        return CheckResult.wrong("The program cannot process multiple " +
                            "operations with several operators.");
                    }

                    // testing all operators, with variables
                    main.execute(" a= 7000000000000000000 \n b =2000000000000000000");
                    output = main.execute("a * 4000000000000000000 / " +
                        "b - (3000000000000000000 - 1000000000000000000)").trim();
                    if (!output.equals("12000000000000000000")) {
                        return CheckResult.wrong(
                            "The program cannot correctly process several operations.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                })

            );
        }
    }
  learner_created: false
- name: src/calculator/Expressions.kt
  visible: true
  text: |+
    package calculator

    fun formatExpression(expression: String): String {
        // simplify multiple + and even number of -
        val output = expression.replace("((\\+)|(--))+".toRegex(), "+")
        // simplify odd number of - and multiple +-/-+
        return output.replace("((\\+?-\\+)|(\\+-\\+?)|(-))+".toRegex(), "-")
    }

    fun isExpression(input: String): Boolean {
        return isNoCommand(input) && isNoAssignment(input) && isNotEmpty(input)
    }

    fun isValidExpression(expression: String): Boolean {
        // check for sequences of *, / or ^
        if ("[*/^]{2,}".toRegex().containsMatchIn(expression)) {
            return false
        }
        // check for unbalanced number of brackets
        if (expression.count { it == '(' } != expression.count { it == ')' }) {
            return false
        }
        // check for invalid variables
        if ("(\\d+[a-zA-Z]+)|([a-zA-Z]+\\d+)".toRegex()
                .containsMatchIn(expression)
        ) {
            return false
        }
        return "\\(*[+-]?(\\d|[a-zA-Z])+(\\)*[+-/*^]\\(*[+-]?(\\d|[a-zA-Z])+)*\\)*".toRegex().matches(expression)
    }

    fun decompose(expression: String): MutableList<String> {
        return "[+-/*^()]|(\\d|[a-zA-Z])+".toRegex().findAll(expression)
            .map { it.value }.toMutableList()
    }

    fun isOperator(input: String) = "[+-/*^()]".toRegex().matches(input)

    fun isHigherPrecedence(incoming: String, top: String): Boolean {
        return when {
            incoming == top -> false
            incoming == "^" -> true
            ((incoming == "*" || incoming == "/") && top != "^") -> true
            else -> false
        }
    }

    fun isLowerOrEqualPrecedence(incoming: String, top: String) =
        !isHigherPrecedence(incoming, top)

    fun convertToPostfix(expression: String): MutableList<String> {
        // decompose expression into mutable list of strings
        val input = decompose(expression)
        // prepare output list and stack
        val output = mutableListOf<String>()
        val stack = ArrayDeque<String>()
        // do postfix conversion
        while (input.isNotEmpty()) {
            if (isOperator(input.first())) {
                if (stack.isEmpty() || stack.first() == "(") {
                    stack.addFirst(input.removeFirst())
                } else if (input.first() == "(") {
                    stack.addFirst(input.removeFirst())
                } else if (input.first() == ")") {
                    // add operators from stack until "("
                    while (stack.first() != "(") output.add(stack.removeFirst())
                    // remove "(" from stack
                    stack.removeFirst()
                    // remove ")" from input
                    input.removeFirst()
                } else if (isHigherPrecedence(input.first(), stack.first())) {
                    stack.addFirst(input.removeFirst())
                } else if (isLowerOrEqualPrecedence(input.first(), stack.first())) {
                    while (stack.isNotEmpty() && stack.first() != "(" &&
                        isLowerOrEqualPrecedence(input.first(), stack.first())
                    ) {
                        output.add(stack.removeFirst())
                    }
                    stack.addFirst(input.removeFirst())
                }
            } else {
                output.add(input.removeFirst())
            }
        }
        // add remaining operators on stack to result
        output.addAll(stack)
        // return expression in postfix notation
        return output
    }

    fun calculate(expression: String): Int? {
        val postfix = convertToPostfix(expression)
        // check for unary -/+
        if (postfix.size == 2) {
            return postfix.first().toInt() * if (postfix.last() == "-") -1 else +1
        } else {
            val stack = ArrayDeque<Int>()
            while (postfix.isNotEmpty()) {
                if (isNumber(postfix.first())) {
                    stack.addFirst(postfix.removeFirst().toInt())
                } else if (isVariable(postfix.first())) {
                    val value = getValue(postfix.removeFirst())
                    if (value != null) {
                        stack.addFirst(value)
                    } else {
                        return null
                    }
                } else if (isOperator(postfix.first())) {
                    val op = getOperation(postfix.removeFirst())
                    if (op != null) {
                        val op2 = stack.removeFirst()
                        val op1 = stack.removeFirst()
                        stack.addFirst(op(op1, op2))
                    } else {
                        return null
                    }
                }
            }
            return stack.first()
        }
    }

    fun evaluateExpression(input: String) {
        val expression = formatExpression(input)
        if (isValidExpression(expression)) {
            val result = calculate(expression)
            if (result != null) println(result)
        } else {
            println("Invalid expression")
        }
    }



  learner_created: true
- name: src/calculator/Operations.kt
  visible: true
  text: |-
    package calculator

    fun add(a1: Int, a2: Int): Int = a1 + a2
    fun subtract(m: Int, s: Int): Int = m - s
    fun multiply(f1: Int, f2: Int): Int = f1 * f2
    fun divide(num: Int, denom: Int): Int = num / denom
    fun power(base: Int, exponent: Int) : Int {
        return if (exponent == 1) {
            base
        } else {
            base * power(base, exponent - 1)
        }
    }

    typealias Operation = (Int, Int) -> Int

    val operations = mapOf(
        "+" to ::add,
        "-" to ::subtract,
        "*" to ::multiply,
        "/" to ::divide,
        "^" to ::power
    )

    fun getOperation(op: String): Operation? {
        val operation = operations[op]
        return if (operation != null) {
            operation
        } else {
            println("Unknown operation")
            null
        }
    }
  learner_created: true
- name: src/calculator/Assignments.kt
  visible: true
  text: |+
    package calculator

    fun isAssignment(input: String) = input.contains("=")

    fun isNoAssignment(input: String) = !isAssignment(input)

    fun isVariable(input: String): Boolean {
        return "[a-zA-Z]+".toRegex().matches(input)
    }

    fun isNumber(input: String): Boolean {
        return "[+-]?\\d+".toRegex().matches(input)
    }

    fun isValidLhs(lhs: String): Boolean {
        return if (isVariable(lhs)) {
            true
        } else {
            println("Invalid identifier")
            false
        }
    }

    fun isValidRhs(rhs: String): Boolean {
        return if (isVariable(rhs) || isNumber(rhs) ||
            isValidExpression(rhs)) {
            true
        } else {
            println("Invalid assignment")
            false
        }
    }

    fun splitIntoLhsAndRhs(input: String): Pair<String, String> {
        val aux = input.split("=", " =", "= ", " = ", limit = 2)
        return Pair(aux.first().trim(), aux.last().trim())
    }

    fun isValidAssignment(input: String): Boolean {
        val (lhs, rhs) = splitIntoLhsAndRhs(input)
        return isValidLhs(lhs) && isValidRhs(rhs)
    }

    fun assignVariableToCache(assignment: String) {
        if (isValidAssignment(assignment)) {
            val (lhs, rhs) = splitIntoLhsAndRhs(assignment)
            if (isNumber(rhs)) {
                addVariable(Pair(lhs, rhs.toInt()))
            } else if (isVariable(rhs)) {
                val value = getValue(rhs)
                if (value != null) addVariable(Pair(lhs, value))
            } else if (isExpression(rhs)) {
                val result = calculate(rhs)
                if (result != null) addVariable(Pair(lhs, result))
            }
        }
    }


  learner_created: true
- name: src/calculator/Commands.kt
  visible: true
  text: |+
    package calculator

    fun isCommand(input: String) = input.startsWith("/")
    fun isNoCommand(input: String) = !isCommand(input)
    fun isNotExit(input: String) = input != "/exit"
    fun printHelp() {
        println(
            "The program performs all elementary arithmetic operations and " +
                    "exponentiation on an arbitrary number of input operands. " +
                    "The operator precedence follows the common definition: " +
                    "(1) parentheses, (2) exponentiation, (3) " +
                    "multiplication/division and (4) addition/subtraction."
        )
    }

    fun exit() {
        println("Bye!")
    }

    val commands = mapOf(
        "/help" to ::printHelp,
        "/exit" to ::exit,
    )

    fun executeCommand(input: String) {
        val command = commands[input]
        if (command != null) {
            command()
        } else {
            println("Unknown command")
        }
    }

  learner_created: true
- name: src/calculator/VariableCache.kt
  visible: true
  text: |
    package calculator

    val variableCache = mutableMapOf<String, Int>()

    fun addVariable(variable: Pair<String, Int>) {
        variableCache += variable
    }

    fun getValue(name: String): Int? {
        return if (variableCache.containsKey(name)) {
            variableCache[name]
        } else {
            println("Unknown variable")
            null
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7816#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Wed, 12 Apr 2023 12:34:45 UTC"
record: -1
